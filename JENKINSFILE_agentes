pipeline {
    agent none
    stages {
        stage('Clonar repositorio') {
            agent { label 'agente-clonador' }
            steps {
                checkout scm
                sh 'whoami && hostname && pwd'
                sh 'ls -l'
                stash name: 'workspace', includes: '**'
                echo 'Repositorio Clonado y guardado.'
            }
        }

        stage('Instalar dependencias') {
            agent { label 'agente-build' }
            options {
                skipDefaultCheckout true
            }
            steps {
                unstash 'workspace'
                sh 'whoami && hostname && pwd'
                sh 'python3 -m venv venv'
                sh '. venv/bin/activate'
                sh 'pip install --upgrade pip --break-system-packages'
                sh 'pip install flask pytest requests --break-system-packages'
                sh 'export PYTHONPATH=$PYTHONPATH:$(pwd)'
                echo 'Dependencias instaladas correctamente en entorno virtual.'
                stash name: 'workspace-build', includes: '**'
            }
        }

        stage('Iniciar Flask y Wiremock') {
            agent { label 'agente-deploy' }
            options {
                skipDefaultCheckout true
            }
            steps {
                unstash 'workspace-build'
                sh '. venv/bin/activate'
                sh 'export PYTHONPATH=$PYTHONPATH:$(pwd)'

                // Iniciar Flask
                sh '''
                echo "Iniciando Flask..."
                nohup python3 app/api.py --host=0.0.0.0 --port=5000 & 
                sleep 5
                for i in {1..10}; do
                    if curl -s http://localhost:5000/; then
                        echo "Flask está corriendo correctamente"
                        break
                    else
                        echo "Esperando que Flask esté disponible..."
                        sleep 2
                    fi
                done
                '''

                // Iniciar Wiremock
                sh '''
                echo "Iniciando Wiremock..."
                mkdir -p test/wiremock
                curl -L -o test/wiremock/wiremock-standalone-2.27.2.jar https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.2/wiremock-standalone-2.27.2.jar
                nohup java -jar test/wiremock/wiremock-standalone-2.27.2.jar --port 9090 --root-dir test/wiremock &
                sleep 5
                for i in {1..10}; do
                    if curl -s http://localhost:9090/; then
                        echo "Wiremock está corriendo correctamente"
                        break
                    else
                        echo "Esperando que Wiremock esté disponible..."
                        sleep 2
                    fi
                done
                '''
            }
        }

        stage('Tests en paralelo') {
            parallel {
                stage('Tests Unitarios') {
                    agent { label 'agente-build' }
                    options {
                        skipDefaultCheckout true
                    }
                    steps {
                        unstash 'workspace-build'
                        sh '. venv/bin/activate'
                        sh 'export PYTHONPATH=$PYTHONPATH:$(pwd)'
                        sh 'python3 -m pytest test/unit --junitxml=result.xml || echo "Error en test unitario."'
                    }
                }

                stage('Tests Service') {
                    agent { label 'agente-deploy' }
                    options {
                        skipDefaultCheckout true
                    }
                    steps {
                        unstash 'workspace-build'
                        sh '. venv/bin/activate'
                        sh 'export PYTHONPATH=$PYTHONPATH:$(pwd)'

                        // Verificar que Flask está disponible
                        sh '''
                        for i in {1..10}; do
                            if curl -s http://localhost:5000/; then
                                echo "Flask está disponible para tests"
                                break
                            else
                                echo "Esperando que Flask esté disponible..."
                                sleep 2
                            fi
                        done
                        '''

                        sh 'python3 -m pytest test/rest --junitxml=results-service.xml || echo "Error en test de servicio."'
                    }
                }
            }
        }
    }

    post {
        always {
            node {
                cleanWs()
                echo 'Pipeline completado con éxito.'
            }
        }
        failure {
            echo 'El pipeline ha fallado. Revisa los errores.'
        }
        success {
            echo 'El pipeline se ha completado correctamente sin errores.'
        }
    }
}
