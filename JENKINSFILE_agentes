pipeline {
    agent none

    stages {
        stage('Clonar repositorio') {
            agent { label 'agente-clonador' }
            steps {
                sh 'whoami && hostname && pwd'
                git branch: 'master', url: 'https://github.com/MelissaMelendez15/helloworld.git'
                sh 'ls -l'
                stash includes: '**', name: 'workspace-clonado'
                echo 'Repositorio Clonado y guardado.'
            }
        }

        stage('Instalar dependencias') {
            agent { label 'agente-build' }
            steps {
                sh 'whoami && hostname && pwd'
                unstash 'workspace-clonado'
                sh 'pip3 install flask pytest requests --break-system-packages'
                echo 'Dependencias instaladas correctamente.'
            }
        }

        stage('Build') {
            agent { label 'agente-build' }
            steps {
                sh 'whoami && hostname && pwd'
                unstash 'workspace-clonado'
                echo 'Build: Verificando archivos clonados...'
                sh 'ls -l app/'
                stash includes: '**', name: 'workspace-build'
                echo 'Build: Verificando archivos clonados...'
                
            }
        }

        stage('Iniciar Flask') {
            agent { label 'agente-deploy' }
            steps {
                sh 'whoami && hostname && pwd'
                unstash 'workspace-build'
                echo 'Limpieza de procesos previos de Flask...'
                sh '''
                    pkill -f "python3 app/api.py" || true
                '''
                echo 'Iniciando Flask...'
                sh 'PYTHONPATH=. nohup python3 app/api.py > flask.log 2>&1 &'
                sh 'sleep 5'
                echo 'Verificando Flask...'
                sh '''
                   if curl -s http://localhost:5000/ | grep "Hello from the Calculator"; then
                      echo "Flask iniciado correctamente."
                   else
                      echo "Error: Flask no inici칩 correctamente..."
                      cat flask.log
                      exit 1
                    fi
                '''
            }
        }

        stage('Iniciar Wiremock') {
            agent { label 'agente-deploy' }
            steps {
                sh 'whoami && hostname && pwd'
                echo 'Limpieza de procesos previos de Wiremock...'
                sh '''
                    pkill -f "java -jar test/wiremock/wiremock-standalone-2.27.2.jar" || true
                '''
                echo 'Iniciando Wiremock...'
                sh '''
                   mkdir -p test/wiremock
                   if [ ! -f test/wiremock/wiremock-standalone-2.27.2.jar ]; then
                    echo "Descargando Wiremock JAR..."
                    curl -L https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.2/wiremock-standalone-2.27.2.jar \
                       -o test/wiremock/wiremock-standalone-2.27.2.jar
                   fi
                '''
                sh 'nohup java -jar test/wiremock/wiremock-standalone-2.27.2.jar --port 9090 --root-dir test/wiremock > wiremock.log 2>&1 &'
                sh 'sleep 10'
                echo 'Verificando Wiremock...'
                sh '''
                    if curl -s http://localhost:9090/__admin; then
                       echo "Wiremock iniciado correctamente."
                    else
                       echo "Error: Wiremock no inici칩 correctamente."
                       cat wiremock.log
                       exit 1
                    fi
                '''
            }
        }

        stage('Tests en paralelo') {
            parallel {
                stage('Tests Unitarios') {
                    agent { label 'agente-build' }
                    steps {
                        sh 'whoami && hostname && pwd'
                        unstash 'workspace-build'
                        echo 'Ejecutando test unitarios...'
                        sh 'PYTHONPATH=. pytest test/unit --junitxml=result.xml || echo "Error en test de servicio."'
                    }
                }

                stage('Tests Service') {
                    agent { label 'agente-deploy' }
                    steps {
                       sh 'whoami && hostname && pwd'
                       unstash 'workspace-build'
                       echo 'Verificando Flask antes del test de servicio...'
                       sh 'curl -v http://localhost:5000/ || echo "Flask no disponible antes del test de servicio."'
                       sh 'sleep 5'
                       echo 'verificando instalaci칩n de pytest...'
                       sh 'pip3 install pytest --break-system-packages || echo "Pytest ya est치 instalado."'
                       echo 'Ejecutando test de servicio...'
                       sh 'PYTHONPATH=. pytest test/rest --junitxml=results-service.xml'
                    }
                }
            }
        }

    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo 'El pipeline ha fallado. Revisa los errores.'
        }
    }
}
