pipeline {
    agent none

    stages {
        stage('Clonar repositorio') {
            agent { label 'agente-clonador' }
            steps {
                sh 'whoami && hostname && pwd'
                git branch: 'master', url: 'https://github.com/MelissaMelendez15/helloworld.git'
                sh 'ls -l'
                stash includes: '**', name: 'workspace-clonado'
                echo 'Repositorio Clonado y guardado.'
            }
        }

        stage('Instalar dependencias') {
            agent { label 'agente-build' }
            options {
                skipDefaultCheckout true
            }
            steps {
                unstash 'workspace-clonado'
                sh 'whoami && hostname && pwd'
                sh '''
                python3 -m venv venv
                source venv/bin/activate
                pip install --upgrade pip
                pip install flask pytest requests
                '''
                echo 'Dependencias instaladas correctamente en entorno virtual.'
                stash includes: '**', name: 'workspace-build'
            }
        }

        stage('Iniciar Flask y Wiremock') {
            agent { label 'agente-deploy' }
            options {
                skipDefaultCheckout true
            }
            steps {
                unstash 'workspace-build'
                sh 'whoami && hostname && pwd'
                echo 'Iniciando Flask y Wiremock...'

                sh '''
                source venv/bin/activate
                nohup python3 app/api.py --host=0.0.0.0 --port=5000 &
                sleep 5

                for i in {1..10}; do
                    if curl -s http://localhost:5000/; then
                        echo "Flask está corriendo correctamente"
                        break
                    else
                        echo "Esperando que Flask esté disponible..."
                        sleep 2
                    fi
                done

                mkdir -p test/wiremock
                if [ ! -f test/wiremock/wiremock-standalone-2.27.2.jar ]; then
                    echo "Descargando Wiremock JAR..."
                    curl -L https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.2.jar -o test/wiremock/wiremock-standalone-2.27.2.jar
                fi

                nohup java -jar test/wiremock/wiremock-standalone-2.27.2.jar --port 9090 --root-dir test/wiremock &
                sleep 5
                '''
            }
        }

        stage('Tests en paralelo') {
            parallel {
                stage('Tests Unitarios') {
                    agent { label 'agente-build' }
                    options {
                        skipDefaultCheckout true
                    }
                    steps {
                        unstash 'workspace-build'
                        sh 'source venv/bin/activate'
                        sh 'python3 -m pytest test/unit --junitxml=result.xml || echo "Error en test unitario."'
                    }
                }

                stage('Tests Service') {
                    agent { label 'agente-deploy' }
                    options {
                        skipDefaultCheckout true
                    }
                    steps {
                        unstash 'workspace-build'
                        sh 'source venv/bin/activate'
                        sh 'curl -s http://localhost:5000/ || echo "Flask no está disponible."'
                        sh 'python3 -m pytest test/rest --junitxml=results-service.xml || echo "Error en test de servicio."'
                    }
                }
            }
        }
    }

    post {
        always {
            node('agente-clonador') {
                cleanWs()
            }
        }
        failure {
            echo 'El pipeline ha fallado. Revisa los errores.'
        }
        success {
            echo 'Pipeline completado con éxito.'
        }
    }
}
