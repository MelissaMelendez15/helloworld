pipeline {
    agent none

    stages {
        stage('Preparar Workspace') {
            agent { label 'agente-clonador' }
            steps {
                sh 'whoami && hostname && echo $WORKSPACE'
                stash name: 'workspace-build', includes: '**/**'
            }
        }

        stage('Iniciar Flask, Wiremock y tests Service') {
            agent { label 'agente-deploy' }
            options { skipDefaultCheckout true }
            steps {
                unstash 'workspace-build'
                sh 'whoami && hostname && echo $WORKSPACE'

                sh '''
                    export PATH="/opt/venv/bin:$PATH"
                    export PYTHONPATH=$PYTHONPATH:$(pwd):$(pwd)/app

                    echo "Iniciando Flask..."
                    nohup python3 -m flask --app app.api run --host=0.0.0.0 --port=5000 &
                    sleep 5
                    for i in {1..10}; do
                        if curl -s http://localhost:5000/; then
                            echo "Flask está corriendo correctamente"
                            break
                        else
                            echo "Esperando que Flask esté disponible..."
                            sleep 2
                        fi
                    done

                    echo "Iniciando Wiremock..."
                    mkdir -p test/wiremock
                    curl -L -o test/wiremock/wiremock-standalone-2.27.2.jar https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.2/wiremock-standalone-2.27.2.jar
                    nohup java -jar test/wiremock/wiremock-standalone-2.27.2.jar --port 9090 --root-dir test/wiremock &
                    sleep 5
                    for i in {1..10}; do
                        if curl -s -o /dev/null -w "%{http_code}" http://localhost:9090/calc/sqrt/64 | grep 200; then
                            echo "Wiremock está corriendo correctamente"
                            break
                        else
                            echo "Esperando que Wiremock esté disponible..."
                            sleep 2
                        fi
                    done

                    echo "Ejecutando pruebas de servicio..."
                    /opt/venv/bin/python3 -m pytest test/rest --junitxml=results-service.xml || echo "Error en test de servicio."
                '''
                stash name: 'test-report', includes: 'results-service.xml'
            }
        }

        stage('Paralelas') {
            parallel {
                stage('Static') {
                    agent { label 'agente-build'}
                    options { skipDefaultCheckout true }
                    steps {
                        unstash 'workspace-build'
                        sh 'whoami && hostname && echo $WORKSPACE'
                        sh '''
                           export PATH="/opt/venv/bin:$PATH"
                           flake8 --exit-zero --format=pylint app > flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')],
                            qualityGates: [
                                [threshold: 8, type: 'TOTAL', unstable: true],
                                [threshold: 10, type: 'TOTAL', failBuild: true]
                            ]
                    }
                }

                stage('Security') {
                    agent { label 'agente-build'}
                    options { skipDefaultCheckout true }
                    steps {
                        unstash 'workspace-deploy'
                        sh 'whoami && hostname && echo $WORKSPACE'
                        sh '''
                            export PATH="/opt/venv/bin:$PATH"
                            bandit -r app -f custom -o bandit.out \
                            --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}" || true
                        '''
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')],
                            qualityGates: [
                                [threshold: 2, type: 'TOTAL', unstable: true],
                                [threshold: 4, type: 'TOTAL', failBuild: true]
                            ]
                    }
                }

                stage('Coverage') {
                    agent { label 'agente-deploy' }
                    options { skipDefaultCheckout true }
                    steps {
                        unstash 'workspace-build'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                               export PATH=/opt/venv/bin:$PATH
                               echo "Iniciando test de cobertura..."
                               PYTHONPATH=. coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit
                               coverage xml -o coverage.xml
                            '''
                        }
                        cobertura coberturaReportFile: '**/coverage.xml', 
                                  lineCoverageTargets: '95,85',
                                  conditionalCoverageTargets: '90,80',
                                  onlyStable: false
                    }
                }

                
                stage('Performance') {
                    agent { label 'agente-deploy' }
                    options { skipDefaultCheckout true }
                    steps {
                        unstash 'workspace-build'
                        sh 'whoami && hostname && echo $WORKSPACE'
                        echo 'Iniciando prueba de rendimiento con JMeter...'
                        sh 'jmeter -n -t test/jmeter/flask.jmx -f -l test/jmeter/flask.jtl'
                        perfReport sourceDataFiles: 'test/jmeter/flask.jtl'
                    }
                }
            }
        }

    }

    post {
        always {
            node('agente-clonador') {
                echo 'Pipeline completado con éxito.'
                unstash 'test-report'
                junit 'results-service.xml'
                cleanWs()
            }
        }
        failure {
            echo 'El pipeline ha fallado. Revisa los errores.'
        }
        success {
            echo 'El pipeline se ha completado correctamente sin errores.'
        }
    }
}
