pipeline {
    agent none

    stages {
        stage('Clonar repositorio') {
            agent { label 'agente-clonador' }
            steps {
                sh 'whoami && hostname && pwd'
                git branch: 'master', url: 'https://github.com/MelissaMelendez15/helloworld.git'
                sh 'ls -l'
                stash includes: '**', name: 'workspace-clonado'
                echo 'Repositorio Clonado y guardado.'
            }
        }

        stage('Instalar dependencias') {
            agent { label 'agente-build' }
            steps {
                sh 'whoami && hostname && pwd'
                unstash 'workspace-clonado'
                sh '/opt/venv/bin/pip install --upgrade pip'
                sh '/opt/venv/bin/pip install flask pytest requests'
                echo 'Dependencias instaladas correctamente'
            }
        }

        stage('Build') {
            agent { label 'agente-build' }
            steps {
                sh 'whoami && hostname && pwd'
                unstash 'workspace-clonado'
                echo 'Build completado y guardado'
                stash includes: '**', name: 'workspace-build'
            }
        }

        stage('Iniciar Flask y Wiremock') {
            agent { label 'agente-deploy' }
            steps {
                echo 'Iniciando Flask y Wiremock en agente-deploy...'
                sh 'whoami && hostname && pwd'
                unstash 'workspace-build'
           sh '''
            source /opt/venv/bin/activate

            # Iniciar Flask
            nohup python3 app/api.py --host=0.0.0.0 --port=5000 &
            sleep 5

            for i in {1..10}; do
                if curl -s http://localhost:5000/; then
                    echo "Flask está corriendo correctamente"
                    break
                else
                    echo "Esperando que Flask esté disponible..."
                    sleep 2
                fi
            done

            # Iniciar Wiremock
            mkdir -p test/wiremock
            [ ! -f test/wiremock/wiremock-standalone-2.27.2.jar ] && echo "Descargando Wiremock JAR..." && curl -L https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.2.jar -o test/wiremock/wiremock-standalone-2.27.2.jar

            nohup java -jar test/wiremock/wiremock-standalone-2.27.2.jar --port 9090 --root-dir test/wiremock &
            sleep 5

            for i in {1..10}; do
                if curl -s http://localhost:9090/__admin; then
                    echo "Wiremock está corriendo correctamente"
                    break
                else
                    echo "Esperando que Wiremock esté disponible..."
                    sleep 2
                fi
            done
        '''
            }
        }


        stage('Tests en paralelo') {
            parallel {
                stage('Tests Unitarios') {
                    agent { label 'agente-build' }
                    steps {
                        sh 'whoami && hostname && pwd'
                        unstash 'workspace-build'
                        echo 'Ejecutando tests unitarios...'
                        sh '/opt/venv/bin/python3 -m pytest test/unit --junitxml=result.xml || echo "Error en test unitario."'
                    }
                }

                stage('Tests Service') {
                    agent { label 'agente-deploy' }
                    steps {
                        sh 'whoami && hostname && pwd'
                        unstash 'workspace-build'
                        echo 'Verificando Flask antes del test de servicio...'

                        sh '''
                        for i in {1..10}; do
                            if curl -s http://localhost:5000/; then
                                echo "Flask está corriendo correctamente."
                                break
                            else
                                echo "Esperando que Flask esté disponible..."
                                sleep 2
                            fi
                        done
                        '''
                        echo 'Ejecutando test de servicio...'
                        sh '/opt/venv/bin/python3 -m pytest test/rest --junitxml=results-service.xml || echo "Error en test de servicio."'
                    }
                }
            }
        }
    }

    post {
        always {
            node('agente-clonador') {
                cleanWs()
            }
        }
        failure {
            echo 'El pipeline ha fallado. Revisa los errores.'
        }
        success {
            echo 'Pipeline completado con éxito.'
        }
    }
}
