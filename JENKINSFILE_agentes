pipeline {
    agent none

    stages {
        stage('Preparar Workspace') {
            agent { label 'agente-clonador' }
            steps {
                sh 'whoami && hostname && echo $WORKSPACE'
                stash name: 'workspace-build', includes: '**/**'
            }
        }

        stage('Iniciar Flask, Wiremock y tests Service') {
            agent { label 'agente-deploy' }
            options { skipDefaultCheckout true }
            steps {
                unstash 'workspace-build'
                sh 'whoami && hostname && echo $WORKSPACE'

                sh '''
                    export PATH="/opt/venv/bin:$PATH"
                    export PYTHONPATH=$PYTHONPATH:$(pwd):$(pwd)/app

                    echo "Iniciando Flask..."
                    nohup python3 -m flask --app app.api run --host=0.0.0.0 --port=5000 &
                    sleep 5
                    for i in {1..10}; do
                        if curl -s http://localhost:5000/; then
                            echo "Flask está corriendo correctamente"
                            break
                        else
                            echo "Esperando que Flask esté disponible..."
                            sleep 2
                        fi
                    done

                    echo "Iniciando Wiremock..."
                    mkdir -p test/wiremock
                    curl -L -o test/wiremock/wiremock-standalone-2.27.2.jar https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.2/wiremock-standalone-2.27.2.jar
                    nohup java -jar test/wiremock/wiremock-standalone-2.27.2.jar --port 9090 --root-dir test/wiremock &
                    sleep 5
                    for i in {1..10}; do
                        if curl -s -o /dev/null -w "%{http_code}" http://localhost:9090/calc/sqrt/64 | grep 200; then
                            echo "Wiremock está corriendo correctamente"
                            break
                        else
                            echo "Esperando que Wiremock esté disponible..."
                            sleep 2
                        fi
                    done

                    echo "Ejecutando pruebas de servicio..."
                    /opt/venv/bin/python3 -m pytest test/rest --junitxml=results-service.xml || echo "Error en test de servicio."
                '''
            }
        }
    }

    post {
        always {
            node('agente-clonador') {
                echo 'Pipeline completado con éxito.'
                junit 'results-*.xml'
                cleanWs()
            }
        }
        failure {
            echo 'El pipeline ha fallado. Revisa los errores.'
        }
        success {
            echo 'El pipeline se ha completado correctamente sin errores.'
        }
    }
}
